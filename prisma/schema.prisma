generator client {
    provider = "prisma-client-js"
    output   = "../node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    // url      = "file:./db.sqlite"
    url      = env("DATABASE_URL")
}

model Problem {
    id String @id @default(cuid())

    title      String
    statement  String
    solution   String
    difficulty Int

    createdAt   DateTime     @default(now())
    submissions Submission[]
    bookmark    Bookmark[]
}

model Submission {
    id          String   @id @default(cuid())
    verdict     String
    problemId   String
    userId      String
    submittedAt DateTime @default(now())
    problem     Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)
    solvedBy    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Bookmark {
    id           String   @id @default(cuid())
    problemId    String
    userId       String
    createdAt    DateTime @default(now())
    problem      Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)
    bookmarkedBy User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Badge {
    id          String         @id @default(cuid())
    name        String
    description String
    url         String
    users       BadgesOnUser[]
}

model BadgesOnUser {
    badgeId   String
    badge     Badge    @relation(fields: [badgeId], references: [id])
    userId    String
    user      User     @relation(fields: [userId], references: [id])
    createdAt DateTime @default(now())

    @@id([badgeId, userId])
}

model Discussion {
    id        String @id @default(cuid())
    title     String
    body      String
    permalink String @unique

    author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId String

    comments Comment[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([permalink])
}

model Comment {
    id   String @id @default(cuid())
    body String

    author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId String

    discussion   Discussion @relation(fields: [discussionId], references: [id], onDelete: Cascade)
    discussionId String

    children Comment[] @relation("comment_children")
    parent   Comment?  @relation("comment_children", fields: [parentId], references: [id])
    parentId String?

    deletedAt DateTime? @db.Timestamp()
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String         @id @default(cuid())
    name          String?
    email         String?        @unique
    role          String         @default("USER")
    githubUrl     String
    bio           String?
    emailVerified DateTime?
    image         String?
    points        Int            @default(0)
    accounts      Account[]
    sessions      Session[]
    submissions   Submission[]
    bookmark      Bookmark[]
    badges        BadgesOnUser[]
    discussions   Discussion[]
    comments      Comment[]
}

model VerificationToken {
    id         String   @id @default(cuid())
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
