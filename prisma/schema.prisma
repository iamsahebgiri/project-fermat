generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // url      = "file:./db.sqlite"
    url      = env("DATABASE_URL")
}

model Problem {
    id String @id @default(cuid())

    title     String
    statement String
    solution  String

    createdAt   DateTime     @default(now())
    submissions Submission[]
}

model Submission {
    id       String  @id @default(cuid())
    verdict  String
    problem  Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
    solvedBy User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    problemId String
    userId    String
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String       @id @default(cuid())
    name          String?
    email         String?      @unique
    role          String       @default("USER")
    githubUrl     String
    bio           String?
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    submissions   Submission[]
}

model VerificationToken {
    id         String   @id @default(cuid())
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
